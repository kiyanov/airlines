import {Injectable} from '@angular/core';import {airports, generateFlights} from '../models/flights.sample-data';import {Airport, Flight, SearchOptions} from '../models/models';import {Observable, of} from 'rxjs';import {map } from 'rxjs/operators';@Injectable({  providedIn: 'root'})export class FlightService {  private flights: Flight[];  private options: SearchOptions;  constructor() {    this.flights = generateFlights(300 );  }  searchFlights(options: SearchOptions): Observable<Flight[]> {    this.options = options;    return of(this.flights)      .pipe(map((flights: Flight[]) => {        return flights          .filter(this.filterByArrival.bind(this))          .filter(this.filterByDeparture.bind(this))          .filter(this.filterByPrice.bind(this));      }));  }  getAirports(): Observable<Airport[]> {    return of(airports);  }  filterByArrival(f: Flight): boolean {      if (this.options.arrival) {        return f.arrival.airport.iata === this.options.arrival;      } else {        return true;      }  }  filterByDeparture(f: Flight): boolean {      if (this.options.departure) {        return f.departure.airport.iata === this.options.departure;      } else {        return true;      }  }  filterByPrice(f: Flight): boolean {    const min = this.options.priceFrom;    const max = this.options.priceTo;    if(!min && !max) {      return true;    }    if(!min){      return f.price <= max;    }    if(!max) {      return f.price >= min;    }    return f.price >= min &&  f.price <= max;  }}